#!/usr/bin/env python
""" 
    Helper to load package embedded OpenSSL shared libraries.

    Copyright (c) 2008-2015, eGenix.com Software GmbH; mailto:info@egenix.com
    See the documentation for further information on copyrights,
    or contact the author. All Rights Reserved.

"""
import os

### Globals

# OpenSSL version the package was compiled for
OPENSSL_VERSION = '1.0.2h'

# OpenSSL library version used by the package
#
# The library version does not include the patch level additions,
# e.g. it's 0.9.8 instead of 0.9.8h.
#
# Also note that this version refers to the library file version,
# which may not match the OpenSSL version, e.g. OpenSSL 1.0.1
# still creates a version 1.0.0 shared library, so this version
# definition reads '1.0.0' for OpenSSL 1.0.1.
#
OPENSSL_LIBRARY_VERSION = '1.0.0'

# Enable debug output ?
_debug = int(os.environ.get('EGENIX_PYOPENSSL_DEBUG', 0))

### Helpers

def find_shared_lib(name, version, dir='.'):

    for template in ('%(name)s.so.%(version)s',
                     '%(name)s.%(version)s.so',
                     '%(name)s.%(version)s.dylib',
                     ):
        pathname = os.path.abspath(
            os.path.join(dir, template % locals()))
        if os.path.exists(pathname):
            return pathname
    return None

# Load the OpenSSL libs included in the package on Unix, instead of
# the system versions
def load_openssl(version):

    if os.name == 'nt':
        # On Windows, the linker looks in the same dir as the
        # depending DLL per default, so no need for an explicit DLL
        # load.
        return 0

    # Load a dlopen() function wrapper
    try:
        # Try mxTools first
        from mx.Tools import dlopen, RTLD_NOW, RTLD_GLOBAL
        if _debug:
            print ('Using mx.Tools.dlopen')
    except ImportError:
        # Fall back to ctypes
        try:
            import ctypes
            RTLD_NOW = 0x2
            RTLD_GLOBAL = 0x100
            dlopen = ctypes._dlopen
            if _debug:
                print ('Using ctypes._dlopen')
        except ImportError:
            if _debug:
                print ('No usable dlopen found')
            return 0

    # Find files
    pkgdir = os.path.split(__file__)[0]
    if _debug:
        print ('Package dir: %s' % pkgdir)
    libcrypto_pathname = find_shared_lib('libcrypto', version, pkgdir)
    libssl_pathname = find_shared_lib('libssl', version, pkgdir)
    if (libcrypto_pathname is None) or (libssl_pathname is None):
        if _debug:
            print ('Could not find embedded OpenSSL shared libs')
        return 0
        
    # libssl.so requires libcrypto.so, so load libcrypto.so first
    try:
        dlopen(libcrypto_pathname, RTLD_NOW + RTLD_GLOBAL)
        if _debug:
            print ('Loaded libcrypto.so from %s' % libcrypto_pathname)
        dlopen(libssl_pathname, RTLD_NOW + RTLD_GLOBAL)
        if _debug:
            print ('Loaded libssl.so from %s' % libssl_pathname)
    except OSError, reason:
        # Did not work, oh well, then we'll use the system DLLs
        if _debug:
            print ('Could not load OpenSSL libs: %s' % reason)
        return 0
    else:
        return 1

###

# Load the (embedded) OpenSSL libs
load_openssl(OPENSSL_LIBRARY_VERSION)
